// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: companyusers.proto

/*
Package companyuserspb is a generated protocol buffer package.

It is generated from these files:
	companyusers.proto

It has these top-level messages:
	User
	Company
	CompanyUser
	Pagination
	SaveUserRequest
	FindUserRequest
	FindAllUsersRequest
	FindAllUsersResponse
	DeleteUserRequest
	SaveCompanyRequest
	FindCompanyRequest
	FindAllCompaniesRequest
	FindAllCompaniesResponse
	DeleteCompanyRequest
	SaveCompanyUserRequest
	FindCompanyUserRequest
	FindAllCompanyUsersRequest
	FindAllCompanyUsersResponse
	FindAllUsersCompaniesRequest
	FindAllUsersCompaniesResponse
	DeleteCompanyUserRequest
*/
package companyuserspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	ID        int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string                      `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string                      `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email     string                      `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,50,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,51,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{0} }

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Company struct {
	ID        int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,50,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,51,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{1} }

func (m *Company) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Company) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type CompanyUser struct {
	CompanyID int64                       `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserID    int64                       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,50,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,51,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *CompanyUser) Reset()                    { *m = CompanyUser{} }
func (m *CompanyUser) String() string            { return proto.CompactTextString(m) }
func (*CompanyUser) ProtoMessage()               {}
func (*CompanyUser) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{2} }

func (m *CompanyUser) GetCompanyID() int64 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *CompanyUser) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CompanyUser) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CompanyUser) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Pagination struct {
	PageNumber     int32 `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	ResultsPerPage int32 `protobuf:"varint,2,opt,name=results_per_page,json=resultsPerPage,proto3" json:"results_per_page,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{3} }

func (m *Pagination) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *Pagination) GetResultsPerPage() int32 {
	if m != nil {
		return m.ResultsPerPage
	}
	return 0
}

type SaveUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SaveUserRequest) Reset()                    { *m = SaveUserRequest{} }
func (m *SaveUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveUserRequest) ProtoMessage()               {}
func (*SaveUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{4} }

func (m *SaveUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type FindUserRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FindUserRequest) Reset()                    { *m = FindUserRequest{} }
func (m *FindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUserRequest) ProtoMessage()               {}
func (*FindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{5} }

func (m *FindUserRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type FindAllUsersRequest struct {
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllUsersRequest) Reset()                    { *m = FindAllUsersRequest{} }
func (m *FindAllUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*FindAllUsersRequest) ProtoMessage()               {}
func (*FindAllUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{6} }

func (m *FindAllUsersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type FindAllUsersResponse struct {
	Users      []*User     `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllUsersResponse) Reset()                    { *m = FindAllUsersResponse{} }
func (m *FindAllUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllUsersResponse) ProtoMessage()               {}
func (*FindAllUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{7} }

func (m *FindAllUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *FindAllUsersResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DeleteUserRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{8} }

func (m *DeleteUserRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type SaveCompanyRequest struct {
	Company *Company `protobuf:"bytes,1,opt,name=company" json:"company,omitempty"`
}

func (m *SaveCompanyRequest) Reset()                    { *m = SaveCompanyRequest{} }
func (m *SaveCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveCompanyRequest) ProtoMessage()               {}
func (*SaveCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{9} }

func (m *SaveCompanyRequest) GetCompany() *Company {
	if m != nil {
		return m.Company
	}
	return nil
}

type FindCompanyRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FindCompanyRequest) Reset()                    { *m = FindCompanyRequest{} }
func (m *FindCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*FindCompanyRequest) ProtoMessage()               {}
func (*FindCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptorCompanyusers, []int{10} }

func (m *FindCompanyRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type FindAllCompaniesRequest struct {
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllCompaniesRequest) Reset()         { *m = FindAllCompaniesRequest{} }
func (m *FindAllCompaniesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllCompaniesRequest) ProtoMessage()    {}
func (*FindAllCompaniesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{11}
}

func (m *FindAllCompaniesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type FindAllCompaniesResponse struct {
	Companies  []*Company  `protobuf:"bytes,1,rep,name=companies" json:"companies,omitempty"`
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllCompaniesResponse) Reset()         { *m = FindAllCompaniesResponse{} }
func (m *FindAllCompaniesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllCompaniesResponse) ProtoMessage()    {}
func (*FindAllCompaniesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{12}
}

func (m *FindAllCompaniesResponse) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *FindAllCompaniesResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DeleteCompanyRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteCompanyRequest) Reset()         { *m = DeleteCompanyRequest{} }
func (m *DeleteCompanyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCompanyRequest) ProtoMessage()    {}
func (*DeleteCompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{13}
}

func (m *DeleteCompanyRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type SaveCompanyUserRequest struct {
	CompanyUser *CompanyUser `protobuf:"bytes,1,opt,name=company_user,json=companyUser" json:"company_user,omitempty"`
}

func (m *SaveCompanyUserRequest) Reset()         { *m = SaveCompanyUserRequest{} }
func (m *SaveCompanyUserRequest) String() string { return proto.CompactTextString(m) }
func (*SaveCompanyUserRequest) ProtoMessage()    {}
func (*SaveCompanyUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{14}
}

func (m *SaveCompanyUserRequest) GetCompanyUser() *CompanyUser {
	if m != nil {
		return m.CompanyUser
	}
	return nil
}

type FindCompanyUserRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FindCompanyUserRequest) Reset()         { *m = FindCompanyUserRequest{} }
func (m *FindCompanyUserRequest) String() string { return proto.CompactTextString(m) }
func (*FindCompanyUserRequest) ProtoMessage()    {}
func (*FindCompanyUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{15}
}

func (m *FindCompanyUserRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type FindAllCompanyUsersRequest struct {
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllCompanyUsersRequest) Reset()         { *m = FindAllCompanyUsersRequest{} }
func (m *FindAllCompanyUsersRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllCompanyUsersRequest) ProtoMessage()    {}
func (*FindAllCompanyUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{16}
}

func (m *FindAllCompanyUsersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type FindAllCompanyUsersResponse struct {
	CompanyUsers []*CompanyUser `protobuf:"bytes,1,rep,name=company_users,json=companyUsers" json:"company_users,omitempty"`
	Pagination   *Pagination    `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllCompanyUsersResponse) Reset()         { *m = FindAllCompanyUsersResponse{} }
func (m *FindAllCompanyUsersResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllCompanyUsersResponse) ProtoMessage()    {}
func (*FindAllCompanyUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{17}
}

func (m *FindAllCompanyUsersResponse) GetCompanyUsers() []*CompanyUser {
	if m != nil {
		return m.CompanyUsers
	}
	return nil
}

func (m *FindAllCompanyUsersResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type FindAllUsersCompaniesRequest struct {
	UserID int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *FindAllUsersCompaniesRequest) Reset()         { *m = FindAllUsersCompaniesRequest{} }
func (m *FindAllUsersCompaniesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllUsersCompaniesRequest) ProtoMessage()    {}
func (*FindAllUsersCompaniesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{18}
}

func (m *FindAllUsersCompaniesRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type FindAllUsersCompaniesResponse struct {
	CompanyIDs []int64     `protobuf:"varint,1,rep,packed,name=company_ids,json=companyIds" json:"company_ids,omitempty"`
	Pagination *Pagination `protobuf:"bytes,50,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *FindAllUsersCompaniesResponse) Reset()         { *m = FindAllUsersCompaniesResponse{} }
func (m *FindAllUsersCompaniesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllUsersCompaniesResponse) ProtoMessage()    {}
func (*FindAllUsersCompaniesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{19}
}

func (m *FindAllUsersCompaniesResponse) GetCompanyIDs() []int64 {
	if m != nil {
		return m.CompanyIDs
	}
	return nil
}

func (m *FindAllUsersCompaniesResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DeleteCompanyUserRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteCompanyUserRequest) Reset()         { *m = DeleteCompanyUserRequest{} }
func (m *DeleteCompanyUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCompanyUserRequest) ProtoMessage()    {}
func (*DeleteCompanyUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCompanyusers, []int{20}
}

func (m *DeleteCompanyUserRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "companyusers.User")
	proto.RegisterType((*Company)(nil), "companyusers.Company")
	proto.RegisterType((*CompanyUser)(nil), "companyusers.CompanyUser")
	proto.RegisterType((*Pagination)(nil), "companyusers.Pagination")
	proto.RegisterType((*SaveUserRequest)(nil), "companyusers.SaveUserRequest")
	proto.RegisterType((*FindUserRequest)(nil), "companyusers.FindUserRequest")
	proto.RegisterType((*FindAllUsersRequest)(nil), "companyusers.FindAllUsersRequest")
	proto.RegisterType((*FindAllUsersResponse)(nil), "companyusers.FindAllUsersResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "companyusers.DeleteUserRequest")
	proto.RegisterType((*SaveCompanyRequest)(nil), "companyusers.SaveCompanyRequest")
	proto.RegisterType((*FindCompanyRequest)(nil), "companyusers.FindCompanyRequest")
	proto.RegisterType((*FindAllCompaniesRequest)(nil), "companyusers.FindAllCompaniesRequest")
	proto.RegisterType((*FindAllCompaniesResponse)(nil), "companyusers.FindAllCompaniesResponse")
	proto.RegisterType((*DeleteCompanyRequest)(nil), "companyusers.DeleteCompanyRequest")
	proto.RegisterType((*SaveCompanyUserRequest)(nil), "companyusers.SaveCompanyUserRequest")
	proto.RegisterType((*FindCompanyUserRequest)(nil), "companyusers.FindCompanyUserRequest")
	proto.RegisterType((*FindAllCompanyUsersRequest)(nil), "companyusers.FindAllCompanyUsersRequest")
	proto.RegisterType((*FindAllCompanyUsersResponse)(nil), "companyusers.FindAllCompanyUsersResponse")
	proto.RegisterType((*FindAllUsersCompaniesRequest)(nil), "companyusers.FindAllUsersCompaniesRequest")
	proto.RegisterType((*FindAllUsersCompaniesResponse)(nil), "companyusers.FindAllUsersCompaniesResponse")
	proto.RegisterType((*DeleteCompanyUserRequest)(nil), "companyusers.DeleteCompanyUserRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserSvc service

type UserSvcClient interface {
	Save(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*User, error)
	Find(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*User, error)
	FindAll(ctx context.Context, in *FindAllUsersRequest, opts ...grpc.CallOption) (*FindAllUsersResponse, error)
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type userSvcClient struct {
	cc *grpc.ClientConn
}

func NewUserSvcClient(cc *grpc.ClientConn) UserSvcClient {
	return &userSvcClient{cc}
}

func (c *userSvcClient) Save(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/companyusers.UserSvc/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) Find(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/companyusers.UserSvc/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) FindAll(ctx context.Context, in *FindAllUsersRequest, opts ...grpc.CallOption) (*FindAllUsersResponse, error) {
	out := new(FindAllUsersResponse)
	err := grpc.Invoke(ctx, "/companyusers.UserSvc/FindAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/companyusers.UserSvc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSvc service

type UserSvcServer interface {
	Save(context.Context, *SaveUserRequest) (*User, error)
	Find(context.Context, *FindUserRequest) (*User, error)
	FindAll(context.Context, *FindAllUsersRequest) (*FindAllUsersResponse, error)
	Delete(context.Context, *DeleteUserRequest) (*google_protobuf.Empty, error)
}

func RegisterUserSvcServer(s *grpc.Server, srv UserSvcServer) {
	s.RegisterService(&_UserSvc_serviceDesc, srv)
}

func _UserSvc_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.UserSvc/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).Save(ctx, req.(*SaveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.UserSvc/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).Find(ctx, req.(*FindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.UserSvc/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).FindAll(ctx, req.(*FindAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.UserSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).Delete(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyusers.UserSvc",
	HandlerType: (*UserSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _UserSvc_Save_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _UserSvc_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _UserSvc_FindAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companyusers.proto",
}

// Client API for CompanySvc service

type CompanySvcClient interface {
	Save(ctx context.Context, in *SaveCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	Find(ctx context.Context, in *FindCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	FindAll(ctx context.Context, in *FindAllCompaniesRequest, opts ...grpc.CallOption) (*FindAllCompaniesResponse, error)
	Delete(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type companySvcClient struct {
	cc *grpc.ClientConn
}

func NewCompanySvcClient(cc *grpc.ClientConn) CompanySvcClient {
	return &companySvcClient{cc}
}

func (c *companySvcClient) Save(ctx context.Context, in *SaveCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/companyusers.CompanySvc/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySvcClient) Find(ctx context.Context, in *FindCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/companyusers.CompanySvc/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySvcClient) FindAll(ctx context.Context, in *FindAllCompaniesRequest, opts ...grpc.CallOption) (*FindAllCompaniesResponse, error) {
	out := new(FindAllCompaniesResponse)
	err := grpc.Invoke(ctx, "/companyusers.CompanySvc/FindAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companySvcClient) Delete(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/companyusers.CompanySvc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanySvc service

type CompanySvcServer interface {
	Save(context.Context, *SaveCompanyRequest) (*Company, error)
	Find(context.Context, *FindCompanyRequest) (*Company, error)
	FindAll(context.Context, *FindAllCompaniesRequest) (*FindAllCompaniesResponse, error)
	Delete(context.Context, *DeleteCompanyRequest) (*google_protobuf.Empty, error)
}

func RegisterCompanySvcServer(s *grpc.Server, srv CompanySvcServer) {
	s.RegisterService(&_CompanySvc_serviceDesc, srv)
}

func _CompanySvc_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanySvcServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanySvc/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanySvcServer).Save(ctx, req.(*SaveCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanySvc_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanySvcServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanySvc/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanySvcServer).Find(ctx, req.(*FindCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanySvc_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanySvcServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanySvc/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanySvcServer).FindAll(ctx, req.(*FindAllCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanySvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanySvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanySvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanySvcServer).Delete(ctx, req.(*DeleteCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanySvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyusers.CompanySvc",
	HandlerType: (*CompanySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _CompanySvc_Save_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CompanySvc_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _CompanySvc_FindAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompanySvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companyusers.proto",
}

// Client API for CompanyUserSvc service

type CompanyUserSvcClient interface {
	Save(ctx context.Context, in *SaveCompanyUserRequest, opts ...grpc.CallOption) (*CompanyUser, error)
	Find(ctx context.Context, in *FindCompanyUserRequest, opts ...grpc.CallOption) (*CompanyUser, error)
	FindAllCompanyUsers(ctx context.Context, in *FindAllCompanyUsersRequest, opts ...grpc.CallOption) (*FindAllCompanyUsersResponse, error)
	FindAllUsersCompanies(ctx context.Context, in *FindAllUsersCompaniesRequest, opts ...grpc.CallOption) (*FindAllUsersCompaniesResponse, error)
	Delete(ctx context.Context, in *DeleteCompanyUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type companyUserSvcClient struct {
	cc *grpc.ClientConn
}

func NewCompanyUserSvcClient(cc *grpc.ClientConn) CompanyUserSvcClient {
	return &companyUserSvcClient{cc}
}

func (c *companyUserSvcClient) Save(ctx context.Context, in *SaveCompanyUserRequest, opts ...grpc.CallOption) (*CompanyUser, error) {
	out := new(CompanyUser)
	err := grpc.Invoke(ctx, "/companyusers.CompanyUserSvc/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserSvcClient) Find(ctx context.Context, in *FindCompanyUserRequest, opts ...grpc.CallOption) (*CompanyUser, error) {
	out := new(CompanyUser)
	err := grpc.Invoke(ctx, "/companyusers.CompanyUserSvc/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserSvcClient) FindAllCompanyUsers(ctx context.Context, in *FindAllCompanyUsersRequest, opts ...grpc.CallOption) (*FindAllCompanyUsersResponse, error) {
	out := new(FindAllCompanyUsersResponse)
	err := grpc.Invoke(ctx, "/companyusers.CompanyUserSvc/FindAllCompanyUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserSvcClient) FindAllUsersCompanies(ctx context.Context, in *FindAllUsersCompaniesRequest, opts ...grpc.CallOption) (*FindAllUsersCompaniesResponse, error) {
	out := new(FindAllUsersCompaniesResponse)
	err := grpc.Invoke(ctx, "/companyusers.CompanyUserSvc/FindAllUsersCompanies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserSvcClient) Delete(ctx context.Context, in *DeleteCompanyUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/companyusers.CompanyUserSvc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanyUserSvc service

type CompanyUserSvcServer interface {
	Save(context.Context, *SaveCompanyUserRequest) (*CompanyUser, error)
	Find(context.Context, *FindCompanyUserRequest) (*CompanyUser, error)
	FindAllCompanyUsers(context.Context, *FindAllCompanyUsersRequest) (*FindAllCompanyUsersResponse, error)
	FindAllUsersCompanies(context.Context, *FindAllUsersCompaniesRequest) (*FindAllUsersCompaniesResponse, error)
	Delete(context.Context, *DeleteCompanyUserRequest) (*google_protobuf.Empty, error)
}

func RegisterCompanyUserSvcServer(s *grpc.Server, srv CompanyUserSvcServer) {
	s.RegisterService(&_CompanyUserSvc_serviceDesc, srv)
}

func _CompanyUserSvc_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserSvcServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanyUserSvc/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserSvcServer).Save(ctx, req.(*SaveCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserSvc_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserSvcServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanyUserSvc/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserSvcServer).Find(ctx, req.(*FindCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserSvc_FindAllCompanyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCompanyUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserSvcServer).FindAllCompanyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanyUserSvc/FindAllCompanyUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserSvcServer).FindAllCompanyUsers(ctx, req.(*FindAllCompanyUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserSvc_FindAllUsersCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUsersCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserSvcServer).FindAllUsersCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanyUserSvc/FindAllUsersCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserSvcServer).FindAllUsersCompanies(ctx, req.(*FindAllUsersCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyusers.CompanyUserSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserSvcServer).Delete(ctx, req.(*DeleteCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyUserSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyusers.CompanyUserSvc",
	HandlerType: (*CompanyUserSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _CompanyUserSvc_Save_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CompanyUserSvc_Find_Handler,
		},
		{
			MethodName: "FindAllCompanyUsers",
			Handler:    _CompanyUserSvc_FindAllCompanyUsers_Handler,
		},
		{
			MethodName: "FindAllUsersCompanies",
			Handler:    _CompanyUserSvc_FindAllUsersCompanies_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompanyUserSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companyusers.proto",
}

func init() { proto.RegisterFile("companyusers.proto", fileDescriptorCompanyusers) }

var fileDescriptorCompanyusers = []byte{
	// 912 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xf3, 0x4b, 0x4e, 0x76, 0xb3, 0xcb, 0xd0, 0x0d, 0xc6, 0xa5, 0x4a, 0x18, 0x96, 0x2a,
	0xcb, 0x2e, 0x09, 0x4a, 0x6f, 0x58, 0x81, 0x90, 0xd2, 0x66, 0x57, 0x0a, 0x17, 0x4b, 0xe5, 0x42,
	0x91, 0x7a, 0x13, 0x39, 0xc9, 0xd4, 0x58, 0xb2, 0x63, 0x63, 0x3b, 0x95, 0xca, 0x1b, 0xc0, 0x0b,
	0x70, 0xc3, 0x1b, 0x70, 0xcf, 0x93, 0x20, 0x2e, 0x73, 0x91, 0x0b, 0x9e, 0x03, 0xcd, 0x78, 0xec,
	0x8c, 0xed, 0x38, 0xb5, 0x94, 0x4a, 0xbd, 0xcb, 0xcc, 0xf9, 0xce, 0xcf, 0xf7, 0x9d, 0x33, 0x27,
	0x06, 0x34, 0xb3, 0x2d, 0x47, 0x5b, 0xdc, 0x2e, 0x3d, 0xe2, 0x7a, 0x3d, 0xc7, 0xb5, 0x7d, 0x1b,
	0x3d, 0x12, 0xef, 0x94, 0x43, 0xdd, 0xb6, 0x75, 0x93, 0xf4, 0x99, 0x6d, 0xba, 0xbc, 0xee, 0x13,
	0xcb, 0xf1, 0x6f, 0x03, 0xa8, 0xd2, 0x4e, 0x1a, 0x7d, 0xc3, 0x22, 0x9e, 0xaf, 0x59, 0x0e, 0x07,
	0x7c, 0xa1, 0x1b, 0xfe, 0xcf, 0xcb, 0x69, 0x6f, 0x66, 0x5b, 0x7d, 0xdd, 0xd6, 0xed, 0x0d, 0x92,
	0x9e, 0xd8, 0x81, 0xfd, 0x0a, 0xe0, 0xf8, 0x3f, 0x09, 0xca, 0x3f, 0x7a, 0xc4, 0x45, 0x2d, 0x28,
	0x1a, 0x73, 0x59, 0xea, 0x48, 0xdd, 0xd2, 0x69, 0x75, 0xbd, 0x6a, 0x17, 0xc7, 0x23, 0xb5, 0x68,
	0xcc, 0xd1, 0x11, 0xc0, 0xb5, 0xe1, 0x7a, 0xfe, 0x64, 0xa1, 0x59, 0x44, 0x2e, 0x76, 0xa4, 0x6e,
	0x5d, 0xad, 0xb3, 0x9b, 0x77, 0x9a, 0x45, 0xd0, 0x21, 0xd4, 0x4d, 0x2d, 0xb4, 0x96, 0x98, 0xf5,
	0x3d, 0x7a, 0xc1, 0x8c, 0x07, 0x50, 0x21, 0x96, 0x66, 0x98, 0x72, 0x99, 0x19, 0x82, 0x03, 0x7a,
	0x0d, 0x30, 0x73, 0x89, 0xe6, 0x93, 0xf9, 0x44, 0xf3, 0xe5, 0x41, 0x47, 0xea, 0x36, 0x06, 0x4a,
	0x2f, 0xe0, 0xd5, 0x0b, 0xab, 0xed, 0xfd, 0x10, 0xf2, 0x52, 0xeb, 0x1c, 0x3d, 0xf4, 0xa9, 0xeb,
	0xd2, 0x99, 0x87, 0xae, 0x27, 0x77, 0xbb, 0x72, 0xf4, 0xd0, 0xc7, 0x7f, 0x49, 0x50, 0x3b, 0x0b,
	0x64, 0xce, 0xe4, 0x8a, 0xa0, 0x2c, 0xb0, 0x64, 0xbf, 0x1f, 0xa8, 0xda, 0x7f, 0x25, 0x68, 0xf0,
	0x6a, 0x59, 0x77, 0x5e, 0x01, 0xf0, 0x19, 0x99, 0x44, 0x95, 0x3f, 0x5e, 0xaf, 0xda, 0x75, 0x0e,
	0x1a, 0x8f, 0xd4, 0x3a, 0x07, 0x8c, 0xe7, 0xe8, 0x53, 0xa8, 0xd1, 0x51, 0xa2, 0xd0, 0x22, 0x83,
	0xc2, 0x7a, 0xd5, 0xae, 0xd2, 0x40, 0xe3, 0x91, 0x5a, 0xa5, 0xa6, 0xf1, 0xfc, 0x81, 0x88, 0xfd,
	0x04, 0x70, 0xae, 0xe9, 0xc6, 0x42, 0xf3, 0x0d, 0x7b, 0x81, 0xda, 0xd0, 0x70, 0x34, 0x9d, 0x4c,
	0x16, 0x4b, 0x6b, 0x4a, 0x5c, 0xc6, 0xab, 0xa2, 0x02, 0xbd, 0x7a, 0xc7, 0x6e, 0x50, 0x17, 0x9e,
	0xba, 0xc4, 0x5b, 0x9a, 0xbe, 0x37, 0x71, 0x88, 0x3b, 0xa1, 0x16, 0x46, 0xa9, 0xa2, 0x36, 0xf9,
	0xfd, 0x39, 0x71, 0xcf, 0x35, 0x9d, 0xe0, 0xd7, 0xf0, 0xe4, 0x42, 0xbb, 0x21, 0x94, 0xa4, 0x4a,
	0x7e, 0x59, 0x12, 0xcf, 0x47, 0xc7, 0x50, 0xa6, 0x5c, 0x59, 0xd8, 0xc6, 0x00, 0xf5, 0x62, 0x2f,
	0x8f, 0x01, 0x99, 0x1d, 0xbf, 0x80, 0x27, 0x6f, 0x8d, 0xc5, 0x5c, 0x74, 0xcd, 0x98, 0x10, 0xfc,
	0x3d, 0x7c, 0x40, 0xa1, 0x43, 0xd3, 0xa4, 0x68, 0x2f, 0x84, 0x7f, 0x05, 0xb4, 0x68, 0xce, 0x8a,
	0x6b, 0x29, 0xc7, 0xf3, 0x6d, 0x58, 0xab, 0x02, 0x16, 0xff, 0x0a, 0x07, 0xf1, 0x80, 0x9e, 0x63,
	0x2f, 0x3c, 0x82, 0xba, 0x50, 0x61, 0x7e, 0xb2, 0xd4, 0x29, 0x65, 0x14, 0x1f, 0x00, 0xf6, 0xc8,
	0xfd, 0x12, 0xde, 0x1f, 0x11, 0x93, 0xf8, 0x24, 0x0f, 0xf3, 0x37, 0x80, 0xa8, 0xbe, 0x7c, 0xde,
	0x42, 0x74, 0x1f, 0x6a, 0x3c, 0x13, 0x57, 0xf9, 0x59, 0x3c, 0x73, 0x08, 0x0f, 0x51, 0xf8, 0x15,
	0x20, 0xca, 0x37, 0x11, 0x26, 0x2b, 0xe9, 0x05, 0x7c, 0xc8, 0xd5, 0x09, 0x1c, 0x0c, 0x72, 0x0f,
	0x92, 0xff, 0x26, 0x81, 0x9c, 0x8e, 0xca, 0x75, 0x3f, 0x01, 0xfe, 0x8e, 0x0c, 0x12, 0x6a, 0x9f,
	0x41, 0x69, 0x83, 0xdb, 0xa3, 0x96, 0x1e, 0x1c, 0x04, 0x2d, 0xc8, 0x29, 0xc8, 0x25, 0xb4, 0x84,
	0x2e, 0x88, 0x7d, 0xfb, 0x06, 0xc2, 0x7f, 0x91, 0x89, 0x30, 0xf4, 0x1f, 0x6d, 0xad, 0x9d, 0xf9,
	0x35, 0x66, 0x9b, 0x03, 0xfe, 0x12, 0x5a, 0x42, 0x5b, 0xf2, 0xcc, 0xc3, 0x25, 0x28, 0x31, 0x11,
	0x6f, 0xef, 0xe9, 0x41, 0xfc, 0x21, 0xc1, 0xe1, 0xd6, 0xc0, 0xbc, 0x41, 0xdf, 0xc2, 0x63, 0x91,
	0x67, 0xd8, 0xa4, 0x1d, 0x44, 0x1f, 0x09, 0x44, 0xf7, 0xe9, 0xd5, 0x19, 0x7c, 0x2c, 0x3e, 0xd5,
	0xd4, 0x44, 0x0a, 0x5b, 0x57, 0xca, 0xda, 0xba, 0xf8, 0x77, 0x09, 0x8e, 0x32, 0xa2, 0x70, 0x82,
	0x7d, 0x68, 0x6c, 0x56, 0x7d, 0x40, 0xaf, 0x74, 0xda, 0x5c, 0xaf, 0xda, 0x10, 0xed, 0x7a, 0x4f,
	0x85, 0x68, 0xd9, 0xef, 0xc3, 0x68, 0x00, 0x72, 0x6c, 0xfa, 0x72, 0xf4, 0x7d, 0xf0, 0x67, 0x11,
	0x6a, 0x14, 0x77, 0x71, 0x33, 0x43, 0x5f, 0x43, 0x99, 0x4e, 0x23, 0x3a, 0x8a, 0x67, 0x4b, 0xec,
	0x61, 0x65, 0xcb, 0xf2, 0xc2, 0x05, 0xea, 0x4c, 0x85, 0x48, 0x3a, 0x27, 0x36, 0x71, 0x86, 0xb3,
	0x0a, 0x35, 0xae, 0x22, 0xfa, 0x24, 0xed, 0x9f, 0x58, 0xcf, 0x0a, 0xde, 0x05, 0x09, 0x64, 0xc7,
	0x05, 0x74, 0x06, 0xd5, 0x40, 0x0d, 0xd4, 0x8e, 0xe3, 0x53, 0x4b, 0x52, 0x69, 0xa5, 0xfe, 0xec,
	0xde, 0xd0, 0x6f, 0x34, 0x5c, 0x18, 0xfc, 0x5d, 0x84, 0xb0, 0x4f, 0x54, 0xa1, 0x21, 0x57, 0xa8,
	0x93, 0x56, 0x28, 0xfe, 0xe2, 0x95, 0xed, 0x5b, 0x06, 0x17, 0x68, 0x08, 0xa6, 0x53, 0x27, 0x4d,
	0x22, 0x6f, 0x88, 0xab, 0x8d, 0x5a, 0x9f, 0x6d, 0x95, 0x22, 0x39, 0xcb, 0xca, 0xf1, 0x5d, 0xb0,
	0x48, 0xb5, 0xb7, 0x91, 0x6a, 0x78, 0x9b, 0x6a, 0x89, 0x12, 0xb3, 0x85, 0xfb, 0xa7, 0x04, 0x4d,
	0x61, 0x0c, 0xa9, 0x78, 0x63, 0x2e, 0xde, 0xf3, 0x4c, 0xf1, 0xc4, 0x9e, 0x64, 0x6f, 0x00, 0x5c,
	0xa0, 0xa1, 0x98, 0x88, 0xcf, 0x33, 0x45, 0xcc, 0x1d, 0xca, 0x8c, 0x3e, 0x01, 0xc4, 0xfd, 0x84,
	0xba, 0x3b, 0x14, 0x8b, 0xed, 0x46, 0xe5, 0x45, 0x0e, 0x64, 0x24, 0xaf, 0x0b, 0xcf, 0xb6, 0xae,
	0x0b, 0xf4, 0x79, 0xf6, 0x4c, 0xa7, 0xba, 0xf9, 0x32, 0x17, 0x36, 0xca, 0xf9, 0x5d, 0xd4, 0xd2,
	0xe3, 0x1d, 0x2d, 0xcd, 0xf5, 0x1e, 0x4e, 0x9f, 0x5e, 0x35, 0xc5, 0x10, 0xce, 0x74, 0x5a, 0x65,
	0x98, 0x93, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xa3, 0x1b, 0x88, 0x09, 0x0d, 0x00, 0x00,
}
